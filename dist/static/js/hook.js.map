{"version":3,"file":"hook.js","sources":["../../../src/views/system/dept/utils/hook.tsx"],"sourcesContent":["import dayjs from \"dayjs\";\nimport editForm from \"../form.vue\";\nimport { handleTree } from \"@/utils/tree\";\nimport { message } from \"@/utils/message\";\nimport { getDeptList } from \"@/api/system\";\nimport { usePublicHooks } from \"../../hooks\";\nimport { addDialog } from \"@/components/ReDialog\";\nimport { reactive, ref, onMounted, h } from \"vue\";\nimport { type FormItemProps } from \"../utils/types\";\nimport { cloneDeep, isAllEmpty } from \"@pureadmin/utils\";\n\nexport function useDept() {\n  const form = reactive({\n    name: \"\",\n    status: null\n  });\n\n  const formRef = ref();\n  const dataList = ref([]);\n  const loading = ref(true);\n  const { tagStyle } = usePublicHooks();\n\n  const columns: TableColumnList = [\n    {\n      label: \"部门名称\",\n      prop: \"name\",\n      width: 180,\n      align: \"left\"\n    },\n    {\n      label: \"排序\",\n      prop: \"sort\",\n      minWidth: 70\n    },\n    {\n      label: \"状态\",\n      prop: \"status\",\n      minWidth: 100,\n      cellRenderer: ({ row, props }) => (\n        <el-tag size={props.size} style={tagStyle.value(row.status)}>\n          {row.status === 1 ? \"启用\" : \"停用\"}\n        </el-tag>\n      )\n    },\n    {\n      label: \"创建时间\",\n      minWidth: 200,\n      prop: \"createTime\",\n      formatter: ({ createTime }) =>\n        dayjs(createTime).format(\"YYYY-MM-DD HH:mm:ss\")\n    },\n    {\n      label: \"备注\",\n      prop: \"remark\",\n      minWidth: 320\n    },\n    {\n      label: \"操作\",\n      fixed: \"right\",\n      width: 160,\n      slot: \"operation\"\n    }\n  ];\n\n  function handleSelectionChange(val) {\n    console.log(\"handleSelectionChange\", val);\n  }\n\n  function resetForm(formEl) {\n    if (!formEl) return;\n    formEl.resetFields();\n    onSearch();\n  }\n\n  async function onSearch() {\n    loading.value = true;\n    const { data } = await getDeptList(); // 这里是返回一维数组结构，前端自行处理成树结构，返回格式要求：唯一id加父节点parentId，parentId取父节点id\n    let newData = data;\n    if (!isAllEmpty(form.name)) {\n      // 前端搜索部门名称\n      newData = newData.filter(item => item.name.includes(form.name));\n    }\n    if (!isAllEmpty(form.status)) {\n      // 前端搜索状态\n      newData = newData.filter(item => item.status === form.status);\n    }\n    dataList.value = handleTree(newData); // 处理成树结构\n    setTimeout(() => {\n      loading.value = false;\n    }, 500);\n  }\n\n  function formatHigherDeptOptions(treeList) {\n    // 根据返回数据的status字段值判断追加是否禁用disabled字段，返回处理后的树结构，用于上级部门级联选择器的展示（实际开发中也是如此，不可能前端需要的每个字段后端都会返回，这时需要前端自行根据后端返回的某些字段做逻辑处理）\n    if (!treeList || !treeList.length) return;\n    const newTreeList = [];\n    for (let i = 0; i < treeList.length; i++) {\n      treeList[i].disabled = treeList[i].status === 0 ? true : false;\n      formatHigherDeptOptions(treeList[i].children);\n      newTreeList.push(treeList[i]);\n    }\n    return newTreeList;\n  }\n\n  function openDialog(title = \"新增\", row?: FormItemProps) {\n    addDialog({\n      title: `${title}部门`,\n      props: {\n        formInline: {\n          higherDeptOptions: formatHigherDeptOptions(cloneDeep(dataList.value)),\n          parentId: row?.parentId ?? 0,\n          name: row?.name ?? \"\",\n          principal: row?.principal ?? \"\",\n          phone: row?.phone ?? \"\",\n          email: row?.email ?? \"\",\n          sort: row?.sort ?? 0,\n          status: row?.status ?? 1,\n          remark: row?.remark ?? \"\"\n        }\n      },\n      width: \"40%\",\n      draggable: true,\n      fullscreenIcon: true,\n      closeOnClickModal: false,\n      contentRenderer: () => h(editForm, { ref: formRef }),\n      beforeSure: (done, { options }) => {\n        const FormRef = formRef.value.getRef();\n        const curData = options.props.formInline as FormItemProps;\n        function chores() {\n          message(`您${title}了部门名称为${curData.name}的这条数据`, {\n            type: \"success\"\n          });\n          done(); // 关闭弹框\n          onSearch(); // 刷新表格数据\n        }\n        FormRef.validate(valid => {\n          if (valid) {\n            console.log(\"curData\", curData);\n            // 表单规则校验通过\n            if (title === \"新增\") {\n              // 实际开发先调用新增接口，再进行下面操作\n              chores();\n            } else {\n              // 实际开发先调用编辑接口，再进行下面操作\n              chores();\n            }\n          }\n        });\n      }\n    });\n  }\n\n  function handleDelete(row) {\n    message(`您删除了部门名称为${row.name}的这条数据`, { type: \"success\" });\n    onSearch();\n  }\n\n  onMounted(() => {\n    onSearch();\n  });\n\n  return {\n    form,\n    loading,\n    columns,\n    dataList,\n    /** 搜索 */\n    onSearch,\n    /** 重置 */\n    resetForm,\n    /** 新增、编辑部门 */\n    openDialog,\n    /** 删除部门 */\n    handleDelete,\n    handleSelectionChange\n  };\n}\n"],"names":["useDept","form","reactive","name","status","formRef","ref","dataList","loading","tagStyle","usePublicHooks","columns","label","prop","width","align","minWidth","cellRenderer","row","props","_createVNode","_resolveComponent","size","value","default","formatter","createTime","dayjs","format","fixed","slot","handleSelectionChange","val","console","resetForm","formEl","onSearch","data","getDeptList","newData","item","handleTree","setTimeout","formatHigherDeptOptions","treeList","newTreeList","i","disabled","title","addDialog","openDialog","cloneDeep","formInline","higherDeptOptions","parentId","principal","phone","email","sort","remark","draggable","fullscreenIcon","h","editForm","closeOnClickModal","contentRenderer","options","curData","FormRef","message","chores","type","valid","handleDelete","onMounted"],"mappings":"yQAWO,SAASA,GAAU,CACxB,MAAMC,EAAOC,EAAS,CACpBC,KAAM,GACNC,OAAQ,IACV,CAAC,EAEKC,EAAUC,IACVC,EAAWD,EAAI,CAAA,CAAE,EACjBE,EAAUF,EAAI,EAAI,EAClB,CAAEG,SAAAA,CAAU,EAAGC,EAAc,EAE7BC,EAA2B,CAC/B,CACEC,MAAO,OACPC,KAAM,OACNC,MAAO,IACPC,MAAO,MACT,EACA,CACEH,MAAO,KACPC,KAAM,OACNG,SAAU,EACZ,EACA,CACEJ,MAAO,KACPC,KAAM,SACNG,SAAU,IACVC,aAAcA,CAAC,CAAEC,IAAAA,EAAKC,MAAAA,KAAOC,EAAAC,EAAA,QAAA,EAAA,CAAA,KACbF,EAAMG,KAAI,MAASb,EAASc,MAAML,EAAId,MAAM,CAAC,EAAA,CAAAoB,QAAAA,IAAA,CACxDN,EAAId,SAAW,EAAI,KAAO,IAAI,CAAA,CAAA,CAGrC,EACA,CACEQ,MAAO,OACPI,SAAU,IACVH,KAAM,aACNY,UAAWA,CAAC,CAAEC,WAAAA,CAAY,IACxBC,EAAMD,CAAU,EAAEE,OAAO,qBAAqB,CAClD,EACA,CACEhB,MAAO,KACPC,KAAM,SACNG,SAAU,GACZ,EACA,CACEJ,MAAO,KACPiB,MAAO,QACPf,MAAO,IACPgB,KAAM,WACR,CAAC,EAGH,SAASC,EAAsBC,EAAK,CAAA,CAClCC,SAAOC,EAA4BC,EAAA,CACrCA,IAESD,EAAAA,YAAUC,EACjBC,KAEAA,eAAUA,GAAA,CACZ5B,EAAA,MAAA,GAEe4B,KAAAA,CACN,KAAAC,GACD,MAAAC,EAAA,EAAED,IAAAA,EAAAA,EAAeC,EAAAA,EAAW,IAAI,IAEtCC,EAAeA,EAAK,OAAQC,GAAAA,EAAA,KAAA,SAAAvC,EAAA,IAAA,CAAA,GAE1BsC,EAAiBtC,EAAO,MAACuC,IAE3BD,EAAeA,EAAK,OAAOC,GAAGA,EAAA,SAAAvC,EAAA,MAAA,GAE5BsC,EAAO,MAAGA,EAAmBA,CAAIC,EACnC,WAAA,IAAA,CACQhC,QAASiC,EACjBC,EAAAA,GAAAA,WAEOC,EAAAC,EAAA,CAGAD,GAAAA,CAAAA,GAAAA,CAAAA,EAAAA,OAAwBC,OAC/B,MAAAC,EAAA,CAAA,EACA,QAAaC,EAAA,EAAAA,EAAaF,SAASE,IAC7BD,EAAAA,CAAAA,EAAAA,SAAgBD,EAAAE,CAAA,EAAA,SAAA,EACtBH,EAAoBC,EAAeE,CAAEA,EAAC,QAAI,EACxCF,EAAYG,KAAAA,EAAmBD,CAAA,CAAA,EAE/BD,OAAAA,CACF,CACA,SAAOA,EAAWG,EAAA,KAAA9B,EAAA,CACpB+B,EAAA,CAEA,UAAmBC,KACjBD,MAAS,CACF,WAAKD,CACV7B,kBAAOwB,EAAAQ,EAAA5C,EAAA,KAAA,CAAA,EACL6C,UAAYlC,GAAA,YAAAA,EAAA,WAAA,EACVmC,MAAiBnC,GAAA,YAAAA,EAAA,OAAEyB,GACnBW,WAAUpC,GAAAA,YAAAA,EAAKoC,YAAa,GAC5BnD,OAAMe,GAAAA,YAAAA,EAAKf,QAAU,GACrBoD,OAAAA,GAAAA,YAAAA,EAAWrC,QAAKqC,GAChBC,MAAOtC,GAAAA,YAAAA,EAAKsC,SACZC,QAAOvC,GAAAA,YAAAA,EAAKuC,SAAW,EACvBC,QAAMxC,GAAAA,YAAAA,EAAKwC,SAAS,EACpBtD,CACAuD,EACF,MAAA,MACF,UAAC,GACD7C,eAAY,GACZ8C,kBAAe,GACfC,gBAAoB,IAAAC,EAAAC,EAAA,CACpBC,IAAAA,CACAC,CAAAA,EAAqC3D,WAAKD,CAAAA,EAAAA,CAAU,QAAA6D,KAC1C,CAAWA,MAAAA,EAAAA,EAAAA,MAAAA,OAAAA,EAAcC,EAAAD,EAAA,MAAA,WACjC,SAAME,GAAiB,CACvBC,MAAgBH,CAAAA,SAAQ/C,EAAiC,IAAA,QAAA,CAChDmD,KAAAA,UACA,EACLC,IACFnC,IAGFgC,EAAA,SAAAI,GAAA,IAIIF,GAMEA,CAAAA,CACF,CACF,CAAA,CACF,CACF,SAAAG,EAAAvD,EAAA,CACFmD,EAAE,YAAAnD,EAAA,IAAA,QAAA,CACJ,KAAA,UAESuD,EACPJ,GAAuCE,CAAgB,OAAAG,EAAE,IAAA,CACzDtC,GACF,CAAA,EAEAsC,CACEtC,KAAAA,EACA,QAAA5B,EAEK,QAAAG,EACLV,SAAAA,EAEAU,SAAAA,EAEA,UAAAuB,EAEA,WAAAgB,EAEA,aAAAuB,EACAvB,sBAAAA,CACA"}