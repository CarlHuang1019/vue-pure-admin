{"version":3,"file":"form.vue_vue_type_script_setup_true_lang.js","sources":["../../../src/views/components/dialog/form.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { ref } from \"vue\";\n\n// 声明 props 类型\nexport interface FormProps {\n  formInline: {\n    user: string;\n    region: string;\n  };\n}\n\n// 声明 props 默认值\n// 推荐阅读：https://cn.vuejs.org/guide/typescript/composition-api.html#typing-component-props\nconst props = withDefaults(defineProps<FormProps>(), {\n  formInline: () => ({ user: \"\", region: \"\" })\n});\n\n// vue 规定所有的 prop 都遵循着单向绑定原则，直接修改 prop 时，Vue 会抛出警告。此处的写法仅仅是为了消除警告。\n// 因为对一个 reactive 对象执行 ref，返回 Ref 对象的 value 值仍为传入的 reactive 对象，\n// 即 newFormInline === props.formInline 为 true，所以此处代码的实际效果，仍是直接修改 props.formInline。\n// 但该写法仅适用于 props.formInline 是一个对象类型的情况，原始类型需抛出事件\n// 推荐阅读：https://cn.vuejs.org/guide/components/props.html#one-way-data-flow\nconst newFormInline = ref(props.formInline);\n</script>\n\n<template>\n  <el-form :model=\"newFormInline\">\n    <el-form-item label=\"姓名\">\n      <el-input\n        class=\"!w-[220px]\"\n        v-model=\"newFormInline.user\"\n        placeholder=\"请输入姓名\"\n      />\n    </el-form-item>\n    <el-form-item label=\"城市\">\n      <el-select\n        class=\"!w-[220px]\"\n        v-model=\"newFormInline.region\"\n        placeholder=\"请选择城市\"\n      >\n        <el-option label=\"上海\" value=\"上海\" />\n        <el-option label=\"浙江\" value=\"浙江\" />\n        <el-option label=\"深圳\" value=\"深圳\" />\n      </el-select>\n    </el-form-item>\n  </el-form>\n</template>\n"],"names":["newFormInline","ref"],"mappings":"kKAsBM,MAAAA,EAAgBC,IAAU,UAAU"}