{"version":3,"file":"hooks3.js","sources":["../../../src/views/tabs/hooks.ts"],"sourcesContent":["import { isString, isEmpty } from \"@pureadmin/utils\";\nimport { useMultiTagsStoreHook } from \"@/store/modules/multiTags\";\nimport {\n  useRouter,\n  useRoute,\n  type LocationQueryRaw,\n  type RouteParamsRaw\n} from \"vue-router\";\n\nexport function useDetail() {\n  const route = useRoute();\n  const router = useRouter();\n  const getParameter = isEmpty(route.params) ? route.query : route.params;\n\n  function toDetail(\n    parameter: LocationQueryRaw | RouteParamsRaw,\n    model: \"query\" | \"params\"\n  ) {\n    // ⚠️ 这里要特别注意下，因为vue-router在解析路由参数的时候会自动转化成字符串类型，比如在使用useRoute().route.query或useRoute().route.params时，得到的参数都是字符串类型\n    // 所以在传参的时候，如果参数是数字类型，就需要在此处 toString() 一下，保证传参跟路由参数类型一致都是字符串，这是必不可少的环节！！！\n    Object.keys(parameter).forEach(param => {\n      if (!isString(parameter[param])) {\n        parameter[param] = parameter[param].toString();\n      }\n    });\n    if (model === \"query\") {\n      // 保存信息到标签页\n      useMultiTagsStoreHook().handleTags(\"push\", {\n        path: `/tabs/query-detail`,\n        name: \"TabQueryDetail\",\n        query: parameter,\n        meta: {\n          title: {\n            zh: `No.${parameter.id} - 详情信息`,\n            en: `No.${parameter.id} - DetailInfo`\n          },\n          // 如果使用的是非国际化精简版title可以像下面这么写\n          // title: `No.${index} - 详情信息`,\n          // 最大打开标签数\n          dynamicLevel: 3\n        }\n      });\n      // 路由跳转\n      router.push({ name: \"TabQueryDetail\", query: parameter });\n    } else if (model === \"params\") {\n      useMultiTagsStoreHook().handleTags(\"push\", {\n        path: `/tabs/params-detail/:id`,\n        name: \"TabParamsDetail\",\n        params: parameter,\n        meta: {\n          title: {\n            zh: `No.${parameter.id} - 详情信息`,\n            en: `No.${parameter.id} - DetailInfo`\n          }\n          // 如果使用的是非国际化精简版title可以像下面这么写\n          // title: `No.${index} - 详情信息`,\n        }\n      });\n      router.push({ name: \"TabParamsDetail\", params: parameter });\n    }\n  }\n\n  // 用于页面刷新，重新获取浏览器地址栏参数并保存到标签页\n  const initToDetail = (model: \"query\" | \"params\") => {\n    if (getParameter) toDetail(getParameter, model);\n  };\n\n  return { toDetail, initToDetail, getParameter, router };\n}\n"],"names":["useDetail","route","useRoute","router","useRouter","getParameter","isEmpty","toDetail","parameter","model","param","isString","useMultiTagsStoreHook"],"mappings":"gEASO,SAASA,GAAY,CAC1B,MAAMC,EAAQC,IACRC,EAASC,IACTC,EAAeC,EAAQL,EAAM,MAAM,EAAIA,EAAM,MAAQA,EAAM,OAExD,SAAAM,EACPC,EACAC,EACA,CAGA,OAAO,KAAKD,CAAS,EAAE,QAAiBE,GAAA,CACjCC,EAASH,EAAUE,CAAK,CAAC,IAC5BF,EAAUE,CAAK,EAAIF,EAAUE,CAAK,EAAE,SAAS,EAC/C,CACD,EACGD,IAAU,SAEUG,EAAA,EAAE,WAAW,OAAQ,CACzC,KAAM,qBACN,KAAM,iBACN,MAAOJ,EACP,KAAM,CACJ,MAAO,CACL,GAAI,MAAMA,EAAU,EAAE,UACtB,GAAI,MAAMA,EAAU,EAAE,eACxB,EAIA,aAAc,CAChB,CAAA,CACD,EAEDL,EAAO,KAAK,CAAE,KAAM,iBAAkB,MAAOK,EAAW,GAC/CC,IAAU,WACGG,EAAA,EAAE,WAAW,OAAQ,CACzC,KAAM,0BACN,KAAM,kBACN,OAAQJ,EACR,KAAM,CACJ,MAAO,CACL,GAAI,MAAMA,EAAU,EAAE,UACtB,GAAI,MAAMA,EAAU,EAAE,eACxB,CAGF,CAAA,CACD,EACDL,EAAO,KAAK,CAAE,KAAM,kBAAmB,OAAQK,EAAW,EAE9D,CAOA,MAAO,CAAE,SAAAD,EAAU,aAJGE,GAA8B,CAC9CJ,GAAcE,EAASF,EAAcI,CAAK,CAAA,EAGf,aAAAJ,EAAc,OAAAF,CAAO,CACxD"}